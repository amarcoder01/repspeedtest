name: Workflow Metrics Collection

on:
  workflow_run:
    workflows: ['*']
    types: [completed]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at midnight
  workflow_dispatch:

jobs:
  collect-metrics:
    name: Collect Workflow Metrics
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install @octokit/rest chart.js dayjs

      - name: Collect workflow metrics
        id: collect-metrics
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { Octokit } = require('@octokit/rest');
            const fs = require('fs');
            const path = require('path');
            const dayjs = require('dayjs');
            
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Create metrics directory if it doesn't exist
            const metricsDir = path.join('.', 'metrics');
            if (!fs.existsSync(metricsDir)) {
              fs.mkdirSync(metricsDir, { recursive: true });
            }
            
            // Get all workflows
            const { data: workflows } = await octokit.actions.listRepoWorkflows({
              owner,
              repo,
            });
            
            // Get current date for data points
            const currentDate = dayjs().format('YYYY-MM-DD');
            
            // Collect metrics for each workflow
            const workflowMetrics = {};
            const overallMetrics = {
              date: currentDate,
              totalRuns: 0,
              successfulRuns: 0,
              failedRuns: 0,
              totalDuration: 0,
              averageDuration: 0,
            };
            
            for (const workflow of workflows.workflows) {
              console.log(`Collecting metrics for workflow: ${workflow.name}`);
              
              // Get runs for this workflow in the last 30 days
              const thirtyDaysAgo = dayjs().subtract(30, 'day').toISOString();
              
              const { data: runs } = await octokit.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: workflow.id,
                created: `>=${thirtyDaysAgo}`,
                per_page: 100,
              });
              
              if (runs.total_count === 0) {
                console.log(`No runs found for workflow: ${workflow.name}`);
                continue;
              }
              
              // Calculate metrics
              const successfulRuns = runs.workflow_runs.filter(run => run.conclusion === 'success');
              const failedRuns = runs.workflow_runs.filter(run => run.conclusion === 'failure');
              
              // Calculate durations for completed runs
              const completedRuns = runs.workflow_runs.filter(run => 
                run.status === 'completed' && 
                run.created_at && 
                run.updated_at
              );
              
              const durations = completedRuns.map(run => {
                const startTime = new Date(run.created_at).getTime();
                const endTime = new Date(run.updated_at).getTime();
                return (endTime - startTime) / 1000; // Duration in seconds
              });
              
              const totalDuration = durations.reduce((sum, duration) => sum + duration, 0);
              const averageDuration = durations.length > 0 ? totalDuration / durations.length : 0;
              
              // Store metrics for this workflow
              const metrics = {
                date: currentDate,
                totalRuns: runs.total_count,
                successfulRuns: successfulRuns.length,
                failedRuns: failedRuns.length,
                successRate: runs.total_count > 0 ? (successfulRuns.length / runs.total_count) * 100 : 0,
                totalDuration,
                averageDuration,
                p95Duration: calculatePercentile(durations, 95),
              };
              
              workflowMetrics[workflow.name] = metrics;
              
              // Update overall metrics
              overallMetrics.totalRuns += runs.total_count;
              overallMetrics.successfulRuns += successfulRuns.length;
              overallMetrics.failedRuns += failedRuns.length;
              overallMetrics.totalDuration += totalDuration;
            }
            
            // Calculate overall average duration
            if (overallMetrics.totalRuns > 0) {
              overallMetrics.averageDuration = overallMetrics.totalDuration / overallMetrics.totalRuns;
              overallMetrics.successRate = (overallMetrics.successfulRuns / overallMetrics.totalRuns) * 100;
            }
            
            // Helper function to calculate percentiles
            function calculatePercentile(values, percentile) {
              if (values.length === 0) return 0;
              
              const sorted = [...values].sort((a, b) => a - b);
              const index = Math.ceil((percentile / 100) * sorted.length) - 1;
              return sorted[index];
            }
            
            // Load existing metrics or create new files
            for (const [workflowName, metrics] of Object.entries(workflowMetrics)) {
              const safeWorkflowName = workflowName.toLowerCase().replace(/[^a-z0-9]/g, '-');
              const metricsFilePath = path.join(metricsDir, `${safeWorkflowName}.json`);
              
              let historicalMetrics = [];
              if (fs.existsSync(metricsFilePath)) {
                try {
                  historicalMetrics = JSON.parse(fs.readFileSync(metricsFilePath, 'utf8'));
                } catch (error) {
                  console.error(`Error reading metrics file for ${workflowName}: ${error.message}`);
                  historicalMetrics = [];
                }
              }
              
              // Add new metrics and limit history to last 90 days
              historicalMetrics.push(metrics);
              historicalMetrics = historicalMetrics
                .filter(m => dayjs(m.date).isAfter(dayjs().subtract(90, 'day')))
                .sort((a, b) => dayjs(a.date).unix() - dayjs(b.date).unix());
              
              // Write updated metrics
              fs.writeFileSync(metricsFilePath, JSON.stringify(historicalMetrics, null, 2));
            }
            
            // Save overall metrics
            const overallMetricsFilePath = path.join(metricsDir, 'overall.json');
            let historicalOverallMetrics = [];
            if (fs.existsSync(overallMetricsFilePath)) {
              try {
                historicalOverallMetrics = JSON.parse(fs.readFileSync(overallMetricsFilePath, 'utf8'));
              } catch (error) {
                console.error(`Error reading overall metrics file: ${error.message}`);
                historicalOverallMetrics = [];
              }
            }
            
            // Add new metrics and limit history to last 90 days
            historicalOverallMetrics.push(overallMetrics);
            historicalOverallMetrics = historicalOverallMetrics
              .filter(m => dayjs(m.date).isAfter(dayjs().subtract(90, 'day')))
              .sort((a, b) => dayjs(a.date).unix() - dayjs(b.date).unix());
            
            // Write updated overall metrics
            fs.writeFileSync(overallMetricsFilePath, JSON.stringify(historicalOverallMetrics, null, 2));
            
            // Generate metrics report
            const reportContent = `# CI/CD Workflow Metrics Report

## Overview

- **Date**: ${currentDate}
- **Total Workflows**: ${workflows.workflows.length}
- **Total Runs (30 days)**: ${overallMetrics.totalRuns}
- **Success Rate**: ${overallMetrics.successRate.toFixed(2)}%
- **Average Duration**: ${formatDuration(overallMetrics.averageDuration)}

## Workflow Performance

| Workflow | Success Rate | Runs (30 days) | Avg Duration | P95 Duration |
|----------|--------------|----------------|--------------|-------------|
${Object.entries(workflowMetrics)
  .sort((a, b) => b[1].totalRuns - a[1].totalRuns)
  .map(([name, metrics]) => 
    `| ${name} | ${metrics.successRate.toFixed(2)}% | ${metrics.totalRuns} | ${formatDuration(metrics.averageDuration)} | ${formatDuration(metrics.p95Duration)} |`
  ).join('\n')}

## Trends

For detailed trend analysis, see the [CI/CD Dashboard](https://github.com/${owner}/${repo}/actions/workflows/dashboard.yml).

*This report is automatically generated by the Workflow Metrics Collection workflow.*
`;
            
            // Helper function to format duration in human-readable format
            function formatDuration(seconds) {
              if (seconds < 60) {
                return `${seconds.toFixed(1)}s`;
              } else if (seconds < 3600) {
                return `${(seconds / 60).toFixed(1)}m`;
              } else {
                return `${(seconds / 3600).toFixed(1)}h`;
              }
            }
            
            // Write report
            fs.writeFileSync(path.join(metricsDir, 'report.md'), reportContent);
            
            // Generate charts
            const chartData = {
              labels: historicalOverallMetrics.map(m => m.date),
              successRate: historicalOverallMetrics.map(m => m.successRate),
              totalRuns: historicalOverallMetrics.map(m => m.totalRuns),
              avgDuration: historicalOverallMetrics.map(m => m.averageDuration / 60), // Convert to minutes
            };
            
            const chartHtml = `
            <!DOCTYPE html>
            <html lang="en">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>CI/CD Metrics Trends</title>
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; padding: 20px; }
                .chart-container { height: 300px; margin-bottom: 30px; }
              </style>
            </head>
            <body>
              <h1>CI/CD Metrics Trends</h1>
              <div class="chart-container">
                <canvas id="successRateChart"></canvas>
              </div>
              <div class="chart-container">
                <canvas id="runsChart"></canvas>
              </div>
              <div class="chart-container">
                <canvas id="durationChart"></canvas>
              </div>
              
              <script>
                // Success Rate Chart
                new Chart(document.getElementById('successRateChart'), {
                  type: 'line',
                  data: {
                    labels: ${JSON.stringify(chartData.labels)},
                    datasets: [{
                      label: 'Success Rate (%)',
                      data: ${JSON.stringify(chartData.successRate)},
                      borderColor: 'rgb(75, 192, 192)',
                      tension: 0.1,
                      fill: false
                    }]
                  },
                  options: {
                    responsive: true,
                    plugins: {
                      title: {
                        display: true,
                        text: 'Success Rate Trend'
                      }
                    },
                    scales: {
                      y: {
                        min: 0,
                        max: 100
                      }
                    }
                  }
                });
                
                // Runs Chart
                new Chart(document.getElementById('runsChart'), {
                  type: 'line',
                  data: {
                    labels: ${JSON.stringify(chartData.labels)},
                    datasets: [{
                      label: 'Total Runs',
                      data: ${JSON.stringify(chartData.totalRuns)},
                      borderColor: 'rgb(54, 162, 235)',
                      tension: 0.1,
                      fill: false
                    }]
                  },
                  options: {
                    responsive: true,
                    plugins: {
                      title: {
                        display: true,
                        text: 'Total Runs Trend'
                      }
                    },
                    scales: {
                      y: {
                        beginAtZero: true
                      }
                    }
                  }
                });
                
                // Duration Chart
                new Chart(document.getElementById('durationChart'), {
                  type: 'line',
                  data: {
                    labels: ${JSON.stringify(chartData.labels)},
                    datasets: [{
                      label: 'Average Duration (minutes)',
                      data: ${JSON.stringify(chartData.avgDuration)},
                      borderColor: 'rgb(255, 99, 132)',
                      tension: 0.1,
                      fill: false
                    }]
                  },
                  options: {
                    responsive: true,
                    plugins: {
                      title: {
                        display: true,
                        text: 'Average Duration Trend'
                      }
                    },
                    scales: {
                      y: {
                        beginAtZero: true
                      }
                    }
                  }
                });
              </script>
            </body>
            </html>
            `;
            
            fs.writeFileSync(path.join(metricsDir, 'trends.html'), chartHtml);
            
            console.log('Metrics collection completed successfully!');

      - name: Commit and push metrics
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add metrics/
          git commit -m "chore: update workflow metrics" || echo "No changes to commit"
          git push

      - name: Generate summary
        run: |
          echo "## Workflow Metrics Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The workflow metrics have been updated and committed to the repository." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View Metrics Report](https://github.com/${{ github.repository }}/blob/main/metrics/report.md)" >> $GITHUB_STEP_SUMMARY